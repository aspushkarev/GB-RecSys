# -*- coding: utf-8 -*-
"""recommenders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1okNELAaFUusfExvTOzqXtOTvzbnODHKh
"""

!pip install implicit

from implicit.nearest_neighbours import ItemItemRecommender
from implicit.als import AlternatingLeastSquares

class MainRecommender(ItemItemRecommender):

    def __init__(self, K=5, num_threads=4):
        self.similarity = None
        self.filter_already_liked_items=False
        self.K = K
        self.num_threads = num_threads
     

    @staticmethod
    def prepare_matrix(data_train):
        
        user_item_matrix = pd.pivot_table(data_train, 
                                  index='user_id', columns='item_id', 
                                  values='quantity',
                                  aggfunc='count', 
                                  fill_value=0
                                 )

        user_item_matrix = user_item_matrix.astype(float)
        sparse_user_item = csr_matrix(user_item_matrix).tocsr()
        
        return user_item_matrix, sparse_user_item
    

    @staticmethod
    def prepare_dicts(user_item_matrix):
        """Подготавливает вспомогательные словари"""
        
        userids = user_item_matrix.index.values
        itemids = user_item_matrix.columns.values

        matrix_userids = np.arange(len(userids))
        matrix_itemids = np.arange(len(itemids))

        id_to_itemid = dict(zip(matrix_itemids, itemids))
        id_to_userid = dict(zip(matrix_userids, userids))

        itemid_to_id = dict(zip(itemids, matrix_itemids))
        userid_to_id = dict(zip(userids, matrix_userids))
        
        return id_to_itemid, id_to_userid, itemid_to_id, userid_to_id
     

    @staticmethod
    def fit_own_recommender(user_item_matrix):
        """
        Обучает модель, которая рекомендует товары 
        среди товаров, купленных юзером
        """
    
        own_recommender = ItemItemRecommender(K=1, num_threads=4)
        own_recommender.fit(csr_matrix(user_item_matrix).T.tocsr(), show_progress=True)
        
        return own_recommender


    @staticmethod
    def fit(sparse_user_item, n_factors=20, regularization=0.001, iterations=15, num_threads=4):
        
        model = AlternatingLeastSquares(factors=n_factors, 
                                             regularization=regularization,
                                             iterations=iterations,  
                                             num_threads=num_threads)
        model.fit(sparse_user_item, show_progress=True)
        # model.fit(csr_matrix(user_item_matrix).T.tocsr(), 
          # show_progress=True)
        
        return model

    @staticmethod
    def get_similar_items_recommendation(model, user, id_to_itemid, \
                                         userid_to_id, \
                                         sparse_user_item, N=5):
        """Рекомендуем товары, похожие на топ-N купленных юзером товаров"""

        res = [id_to_itemid[rec] for rec in 
                      model.recommend(userid=userid_to_id[user], 
                                      user_items=sparse_user_item,
                                      N=N, 
                                      filter_already_liked_items=False, 
                                      filter_items=None,
                                      recalculate_user=True)[0]]

        assert len(res) == N, 'Количество рекомендаций != {}'.format(N)
        return res
    
    @staticmethod
    def get_similar_users_recommendation(model, user, id_to_itemid, \
                                        userid_to_id, \
                                        sparse_user_item, N=5):
        """Рекомендуем топ-N товаров, среди купленных похожими юзерами"""
    
        res = [id_to_itemid[rec] for rec in 
                  model.recommend(userid=userid_to_id[user], 
                                  user_items=sparse_user_item[userid_to_id[user]],
                                  N=N, 
                                  filter_already_liked_items=False, 
                                  filter_items=[itemid_to_id[999999]], 
                                  recalculate_user=True)[0]]

        assert len(res) == N, 'Количество рекомендаций != {}'.format(N)
        return res